/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package screenshots;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Iterator;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author Sharique
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        userAgentModel.addElement(new UserAgent("Android 2.1 - Nexus One - Safari 530.17", "Mozilla/5.0 (Linux; U; Android 2.1; en-us; Nexus One Build/ERD62) AppleWebKit/530.17 (KHTML, like Gecko) Version/4.0 Mobile Safari/530.17"));
        userAgentChkList.setModel(userAgentModel);
        setTitle("Scenester");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        protocolRadioGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ipListTxtArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        httpRbtn = new javax.swing.JRadioButton();
        httpsRbtn = new javax.swing.JRadioButton();
        runBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        userAgentListFile = new javax.swing.JTextField();
        browseUserAgentBtn = new javax.swing.JButton();
        importBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        userAgentChkList = new javax.swing.JList();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        importMenuItem = new javax.swing.JMenuItem();
        exportMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("URL/IP List"));

        ipListTxtArea.setColumns(20);
        ipListTxtArea.setRows(5);
        jScrollPane1.setViewportView(ipListTxtArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Protocol"));

        protocolRadioGroup.add(httpRbtn);
        httpRbtn.setSelected(true);
        httpRbtn.setText("HTTP");
        httpRbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Main.this.actionPerformed(evt);
            }
        });

        protocolRadioGroup.add(httpsRbtn);
        httpsRbtn.setText("HTTPS");
        httpsRbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Main.this.actionPerformed(evt);
            }
        });

        runBtn.setText("Run");
        runBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(httpRbtn)
                .addGap(18, 18, 18)
                .addComponent(httpsRbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(runBtn)
                .addGap(21, 21, 21))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(httpRbtn)
                        .addComponent(httpsRbtn))
                    .addComponent(runBtn))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("User Agent"));

        userAgentListFile.setEditable(false);

        browseUserAgentBtn.setText("Browse");
        browseUserAgentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Main.this.actionPerformed(evt);
            }
        });

        importBtn.setText("Import");
        importBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Main.this.actionPerformed(evt);
            }
        });

        userAgentChkList.setToolTipText("User-Agent List");
        jScrollPane2.setViewportView(userAgentChkList);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(userAgentListFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseUserAgentBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(importBtn)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userAgentListFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseUserAgentBtn)
                    .addComponent(importBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        importMenuItem.setMnemonic('o');
        importMenuItem.setText("Import");
        importMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Main.this.actionPerformed(evt);
            }
        });
        fileMenu.add(importMenuItem);

        exportMenuItem.setMnemonic('s');
        exportMenuItem.setText("Export");
        exportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Main.this.actionPerformed(evt);
            }
        });
        fileMenu.add(exportMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Main.this.actionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void runBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runBtnActionPerformed
        String timeStamp = new SimpleDateFormat("dd_MM_yyyy_HHmm").format(Calendar.getInstance().getTime());
        File destFolder = new File(rootFolder + "\\" + timeStamp);
        /* Validate URLs and User-Agent list exise */
        /* validate URL box contain something */
        String txtAtea_text = ipListTxtArea.getText();
        if ((txtAtea_text == null) || (txtAtea_text.trim().length() <= 0)) {
            JOptionPane.showMessageDialog(this, "Please enter target URL", "URL's Missing", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String urls[] = txtAtea_text.split("\\n");
        /* Validate URL box contian atleast one line */
        if (urls.length < 0) {
            JOptionPane.showMessageDialog(this, "Please enter target URL", "URL's Missing", JOptionPane.ERROR_MESSAGE);
            return;
        }

        /* Iterate through all the urls one by one and then open each url with selected user agent header*/
        for (int i = 0; i < urls.length; i++) {

            int result[] = userAgentChkList.getSelectedIndices();
            if (result.length != 0) {
                for (int j = 0; j < result.length; j++) {

                    FirefoxProfile profile = new FirefoxProfile();
                    UserAgent temp = (UserAgent) userAgentModel.get(result[i]);
                    profile.setPreference("general.useragent.override", temp.getUserAgent());
                    WebDriver driver = new FirefoxDriver(profile);
                    if ((urls[i].indexOf("http://") == -1) && (urls[i].indexOf("https://") == -1)) {
                        driver.get(protocol + "://" + urls[i]);
                    } else {
                        driver.get(urls[i]);
                    }
                    try {
                        Thread.sleep(3000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }


                    try {
                        // Now you can do whatever you need to do with it, for example copy somewhere
                        File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);

                        String tempFilename = URLEncoder.encode(urls[i], "UTF-8") + "_" + (counter++) + ".png";
                        FileUtils.copyFile(scrFile, new File(destFolder.getAbsolutePath() + "\\" + tempFilename));
                        System.out.println(destFolder.getAbsolutePath());

                    } catch (IOException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    } finally {
                        driver.close();
                    }

                }


            } else {
                JOptionPane.showMessageDialog(this, "Select atleast one User-Agent", "User-Agent Missing", JOptionPane.ERROR_MESSAGE);
                return;
            }


        }

        if (Desktop.isDesktopSupported()) {
            try {
                Desktop desktop = Desktop.getDesktop();
                desktop.open(destFolder);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else
        {
            JOptionPane.showMessageDialog(this, "Screen Shots copied to the:" + destFolder.getAbsolutePath(), "Finish", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

    }//GEN-LAST:event_runBtnActionPerformed

    private void actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionPerformed

        if (evt.getSource() == httpRbtn) {
            /*if HTTP is selected */
            protocol = "http";
        } else if (evt.getSource() == httpsRbtn) {
            /* if HTTPS is selected */
            protocol = "https";
        } else if (evt.getSource() == importMenuItem) {
            /* opening open file dialog to select text file that can be loaded into text area. */
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = fileChooser.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File openFile = fileChooser.getSelectedFile();
                try {
                    BufferedReader br = new BufferedReader(new FileReader(openFile));
                    String line;
                    while ((line = br.readLine()) != null) {
                        ipListTxtArea.append(line);
                        ipListTxtArea.append(System.getProperty("line.separator"));

                    }
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }

                System.out.println(openFile.getAbsoluteFile());
                //open file and read file line by line and appent into test area.

            }

        } else if (evt.getSource() == exportMenuItem) {
            /* Saving file that can */
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = fileChooser.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                FileWriter fileWriter;
                BufferedWriter bufferedWriter;
                try {
                    File saveFile = fileChooser.getSelectedFile();
                    if (saveFile.exists()) {
                        Object[] option = {"Yes", "No"};
                        int result = JOptionPane.showOptionDialog(this, "File Already Exis.\nDo You Want To Replace It ?", "Confirm Export", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, option, option[1]);
                        if (result > 0) {
                            return;
                        }
                    } else {
                        saveFile.createNewFile();
                    }
                    fileWriter = new FileWriter(saveFile);
                    bufferedWriter = new BufferedWriter(fileWriter);
                    bufferedWriter.write(ipListTxtArea.getText().trim());
                    bufferedWriter.close();
                    fileWriter.close();
                    System.out.println(fileChooser.getSelectedFile().getCanonicalFile());
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            System.out.println("SAVE ITEM");
        } else if (evt.getSource() == aboutMenuItem) {
            /* Saving file that can */
            JOptionPane.showMessageDialog(this, "This program is released as open source by NCC Group Plc - http://www.nccgroup.com/\n" + "Developed by Sharique Shaikh, sharique.shaikh@nccgroup.com");;
        } else if (evt.getSource() == browseUserAgentBtn) {
            /* opening open file dialog to select text file that can be loaded into text area. */
            /* Import Useragent list from the XML file format of the XML file must be as follow
             *<scenester>
             *	<useragent description="Chrome 4.0.302.2 (OS X 10_5_8 Intel)" useragent="Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_8; en-US) AppleWebKit/532.8 (KHTML, like Gecko) Chrome/4.0.302.2 Safari/532.8" platform="Windows" />
             *	<useragent description="Chrome 4.0.302.2 (OS X 10_5_8 Intel)" useragent="Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_8; en-US) AppleWebKit/532.8 (KHTML, like Gecko) Chrome/4.0.302.2 Safari/532.8" platform="Windows" />
             *</scenester>
             * 
             */
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            //userAgentList.clear();
            int returnVal = fileChooser.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                openUserAgentFile = fileChooser.getSelectedFile();
                userAgentListFile.setText(openUserAgentFile.getAbsolutePath());
            }

        } else if (evt.getSource() == importBtn) {
            /* Import XML file into the list file
             */

            /*make sure that value in userAgentListFile text fiel and openUserAgentFile file Dialog box is same */
            if (openUserAgentFile != null) {
                if ((userAgentListFile.getText().equalsIgnoreCase(openUserAgentFile.getAbsolutePath())) && (openUserAgentFile.getAbsolutePath().trim().length() != 0)) {

                    /*Loading XML File*/
                    try {
                        DocumentBuilder db = dbf.newDocumentBuilder();
                        Document doc = db.parse(openUserAgentFile);
                        doc.getDocumentElement().normalize();

                        NodeList rootNode = doc.getElementsByTagName("scenester");
                        Node rutNode = rootNode.item(0);
                        counter = 0;
                        if (rutNode.getNodeType() == Node.ELEMENT_NODE) {
                            Element folderElmnt = (Element) rutNode;
                            System.out.println(folderElmnt.getAttribute("description"));
                            NodeList subFolderElmntLst = folderElmnt.getElementsByTagName("useragent");

                            for (int i = 0; i < subFolderElmntLst.getLength(); i++) {
                                Node useragentNode = subFolderElmntLst.item(i);

                                if (useragentNode.getNodeType() == Node.ELEMENT_NODE) {
                                    Element useragentrElmnt = (Element) useragentNode;
                                    userAgentModel.addElement(new UserAgent(useragentrElmnt.getAttribute("description"), useragentrElmnt.getAttribute("useragent")));
                                }
                            }
                            /*reset counter to zero and clear browse box*/
                            counter = 0;
                            userAgentChkList.setModel(userAgentModel);
                            userAgentListFile.setText("");

                        }
                    } catch (ParserConfigurationException | SAXException | IOException e) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, e);
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Please select file to import first", "Import Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select file to import first", "Import Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_actionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton browseUserAgentBtn;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem exportMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JRadioButton httpRbtn;
    private javax.swing.JRadioButton httpsRbtn;
    private javax.swing.JButton importBtn;
    private javax.swing.JMenuItem importMenuItem;
    private javax.swing.JTextArea ipListTxtArea;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.ButtonGroup protocolRadioGroup;
    private javax.swing.JButton runBtn;
    private javax.swing.JList userAgentChkList;
    private javax.swing.JTextField userAgentListFile;
    // End of variables declaration//GEN-END:variables
    private String protocol = "http";
    final private JFileChooser fileChooser = new JFileChooser();
    private File openUserAgentFile = null;
    //private Vector<UserAgent> userAgentList = new Vector<UserAgent>();
    private DefaultListModel userAgentModel = new DefaultListModel();
    private DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
    private String rootFolder = "Screenshots";
    int counter = 1;
}
